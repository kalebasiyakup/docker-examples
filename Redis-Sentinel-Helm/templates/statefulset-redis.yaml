apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: {{ .Values.namespace }}
  labels:
    app: redis
spec:
  serviceName: "redis"
  replicas: {{ .Values.replicaCount.redis }}
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
        - name: init-redis-config
          image: busybox:1.36.1
          command: ["/bin/sh","-c"]
          args:
            - |
              set -euo pipefail
              PW="$(cat /auth/redis-password)"
              mkdir -p /config
              cp /config-src/base-redis.conf /config/redis.conf
              {
                echo "requirepass ${PW}"
                echo "masterauth ${PW}"
                echo "protected-mode no"
              } >> /config/redis.conf
              ORDINAL="$(echo ${HOSTNAME} | awk -F'-' '{print $NF}')"
              if [ "$ORDINAL" != "0" ]; then
                echo "replicaof redis-0.redis 6379" >> /config/redis.conf
              fi
              cp /config-src/sentinel.conf /config/sentinel.conf
              echo "sentinel auth-pass mymaster ${PW}" >> /config/sentinel.conf
          volumeMounts:
            - name: redis-config-gen
              mountPath: /config
            - name: redis-config
              mountPath: /config-src
            - name: redis-auth
              mountPath: /auth
              readOnly: true
      containers:
        - name: redis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/sh","-c"]
          args: ["exec redis-server /config/redis.conf"]
          ports:
            - containerPort: 6379
              name: redis
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: redis-password
          resources:
            {{- toYaml .Values.resources.redis | nindent 12 }}
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config-gen
              mountPath: /config
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
        - name: redis-auth
          secret:
            secretName: redis-auth
        - name: redis-config-gen
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        storageClassName: {{ .Values.persistence.storageClassName | quote }}
